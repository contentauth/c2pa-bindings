
namespace c2pa {
  string version();
  sequence<string> supported_extensions();
};

[Error]
enum C2paError {
  "Json",
  "Io",
  "Ffi",
  "Other",
  "Sdk",
  "Stream",
  "RwLock"
};

[Error]
interface StreamError {
  Io(string reason);
  Other(string reason);
  InternalStreamError();
};

enum SeekMode {
  "Start",
  "End",
  "Current"
};

callback interface Stream {
  [Throws=StreamError]
  bytes read_stream(u64 length);

  [Throws=StreamError]
  u64 seek_stream(i64 pos, SeekMode mode);

  [Throws=StreamError]
  u64 write_stream(bytes data);
};

interface ManifestStoreReader {
  constructor();

  [Throws=StreamError]
  string read_stream([ByRef] string format, Stream reader);

  [Throws=StreamError]
  string json();

  [Throws=StreamError]
  bytes resource([ByRef] string manifest, [ByRef] string id);

  [Throws=StreamError]
  void resource_write([ByRef] string manifest, [ByRef] string id, [ByRef] Stream stream);
};

dictionary ManifestBuilderSettings {
  string generator;
};

interface ManifestBuilder {
  constructor([ByRef] ManifestBuilderSettings settings);
  
  [Throws=C2paError]
  void from_json([ByRef] string json);

  [Throws=C2paError]
  void sign_stream([ByRef] C2paSigner signer, Stream input, Stream? output);
};

dictionary SignerConfig {
  string alg;

  bytes certs;

  string? time_authority_url = null;

  boolean use_ocsp = false;
};

callback interface SignerCallback {
  [Throws=StreamError]
  bytes sign(bytes data);
};

interface C2paSigner {
  constructor(SignerCallback callback);

  [Throws=C2paError]
  void configure([ByRef] SignerConfig config);
};